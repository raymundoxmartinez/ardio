{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Storybook template": {
    "prefix": "sto",
    "body": [
      "import * as React from 'react'",
      "import { storiesOf } from '@storybook/react'",
      "import ${0:Component} from './${0:Component}'",
      "import readme from './docs.md'",

      "storiesOf('${0:Component}', module)",
      ".addParameters({",
      "readme: { content: readme },",
      "})",
      ".add('${0:Component}', () => {",
      "return (",
      "<${0:Component}",
      "/>",
      ")",
      "})"
    ],
    "description": "Boilerplate for stories"
  },
  "Hook template": {
    "prefix": "hoo",
    "body": [
      "import * as React from 'react'",
      "const reducer = (state, action)=>{",
      "switch (action.type) {",
      "case 'ACTION_NAME'",
      "return {",
      "...state",
      "}",
      "default:",
      "return state",
      "}",
      "}",
      "const initialState={",
      "}",
      "const {useReducer}= React",
      "const ${0:useHook} =()=>{",
      "const [state, dispatch] = useReducer(reducer, initialState)",
      "return {",
      "...state",
      "}",
      "}",
      "export default ${0:useHook}"
    ],
    "description": "React hook boilerplate"
  },

  "Index template": {
    "prefix": "ind",
    "body": ["export {default} from './${0:Component}'"]
  },

  "Component template": {
    "prefix": "com",
    "body": [
      "import * as React from 'react'",
      "import useStyles from './useStyles'",
      "const ${0:Component}=()=>{",
      "return (",
      ")",
      "}",
      "export default ${0:Component}"
    ]
  },
  "Unit test template": {
    "prefix": "tes",
    "body": [
      "import * as React from 'react'",
      "import { render } from '@testing-library/react'",
      "import chai, { assert } from 'chai'",
      "import chaiAsPromised from 'chai-as-promised'",
      "import ${0:Component} from '.'",
      "chai.use(chaiAsPromised)",
      "let cleanup: any",
      "beforeEach(() => (cleanup = require('jsdom-global')()))",
      "afterEach(() => cleanup())",
      "describe('Renders ${0:Component}', () => {",
      "it('should render the ${0:Component}', () => {",
      "const { getByTestId } = render(<${0:Component}  />)",
      "assert.exists(getByTestId(''))",
      " })",
      "})"
    ]
  }
}
